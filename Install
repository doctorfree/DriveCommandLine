#!/bin/bash
#
# Usage: ./Install [package names]
#   If no package names are specified then all currently
#   supported packages will be installed
#
# Versions of apt prior to 1.1 do not support install by Debian filename
# You should probably be running a more recent version of apt
# On these early versions, install with the following:
#
# sudo dpkg -i "${PKG}"
# sudo apt-get install -f

SRC_NAME="DriveCommandLine"
PKG_NAMES="DriveCommandLine"
APT_NAMES="drivecommandline"
SRC="${HOME}/src"

PKG_AVAILABLE=
PKG_SELECTED=

[ -f "${SRC}/${SRC_NAME}/VERSION" ] || {
  echo "Missing VERSION file: ${SRC}/${SRC_NAME}/VERSION"
  echo "Exiting"
  exit 1
}

. "${SRC}/${SRC_NAME}/VERSION"
PKG_VER=${VERSION}
PKG_REL=${RELEASE}
PKG_PRE="${PKG_NAME}_${PKG_VER}-${PKG_REL}"

get_available_packages() {
  for pkgs in ${SRC}/${SRC_NAME}/releases/${PKG_VER}/${PKG_PRE}.${PLAT}_${ARCH}*
  do
    [ "${pkgs}" == "${SRC}/${SRC_NAME}/releases/${PKG_VER}/${PKG_PRE}.${PLAT}_${ARCH}*" ] && continue
    for pkg in ${pkgs}
    do
      pkgname=`basename ${pkg} | sed -e "s/_${PKG_VER}-${PKG_REL}.${PLAT}_${ARCH}.${SUF}//"` 
      PKG_AVAILABLE="${PKG_AVAILABLE} ${pkgname}"
    done
  done
  PKG_AVAILABLE=`echo $PKG_AVAILABLE | sed -e "s/^ //"`
}

install_selected() {
  for pkg in ${PKG_AVAILABLE}
  do
    while true
    do
      read -p "Install ${pkg} ? ('Y'/'N'): " yn
      case $yn in
          [Yy]*)
              PKG_SELECTED="${PKG_SELECTED} $pkg"
              break
              ;;
          [Nn]*)
              break
              ;;
          * )
              echo "Please answer yes or no."
              ;;
      esac
    done
  done
  PKG_SELECTED=`echo $PKG_SELECTED | sed -e "s/^ //"`
}

platform=`uname -o`
PLAT=`echo ${platform} | tr '[:upper:]' '[:lower:]'`
echo ${PLAT} | grep '/' > /dev/null && {
  PLAT=`echo ${PLAT} | awk -F '/' ' { print $2 } '`
}
notlinux=1
echo ${PLAT} | grep linux > /dev/null && notlinux=

if [ "${notlinux}" ]
then
  ARCH=`uname -m`
  [ "${ARCH}" == "x86_64" ] && ARCH="amd64"
  SUF="tgz"
else
  debian=
  have_apt=`type -p apt`
  have_dpkg=`type -p dpkg`
  have_rpm=`type -p rpm`
  have_yum=`type -p yum`
  [ -f /etc/os-release ] && . /etc/os-release
  [ "${ID_LIKE}" == "debian" ] && debian=1
  [ "${debian}" ] || [ -f /etc/debian_version ] && debian=1

  SUF=deb
  if [ "${debian}" ]
  then
    ARCH=`dpkg --print-architecture`
  else
    SUF=rpm
    ARCH=`rpm --eval '%{_arch}'`
  fi
  [ "${ARCH}" == "x86_64" ] && ARCH="amd64"
fi

get_available_packages

[ "$PKG_AVAILABLE}" ] || {
    echo "No packages for version ${PKG_VER} are currently available. Exiting."
    exit 1
}

[ "$1" ] && {
    # If invoked with -i argument, present a menu of options to select from
    if [ "$1" == "-i" ]
    then
      shift
      PKG_NAMES="$*"
      [ "${PKG_AVAILABLE}" ] && {
        echo "Currently available DriveCommandLine packages:"
        echo ""
        for avaipkg in ${PKG_AVAILABLE}
        do
          echo "$avaipkg"
        done
        echo ""
      }
      while true
      do
        PS3="${BOLD}Please enter your desire (numeric or text): ${NORMAL}"
        options=("Install All" "Install Selected" "Quit")
        select opt in "${options[@]}"
        do
          case "$opt,$REPLY" in
              "Install All",*|*,"Install All")
                  PKG_NAMES="${PKG_AVAILABLE}"
                  break 2
                  ;;
              "Install Selected",*|*,"Install Selected")
                  install_selected
                  PKG_NAMES="${PKG_SELECTED}"
                  break 2
                  ;;
              "Quit",*|*,"Quit"|"quit",*|*,"quit")
                  printf "\nExiting\n"
                  exit 0
                  ;;
          esac
        done
      done
    else
      PKG_NAMES="$*"
    fi
}

[ "${PKG_NAMES}" ] || {
    echo "No valid Package names specified. Exiting."
    exit 1
}

for PKG_NAME in ${PKG_NAMES}
do
    PKG="${SRC}/${SRC_NAME}/releases/${PKG_VER}/${PKG_PRE}.${PLAT}_${ARCH}.${SUF}"
    [ -f "${PKG}" ] || {
      PKG="${SRC}/${SRC_NAME}/releases/${PKG_VER}/${PKG_PRE}.${ARCH}.${SUF}"
      [ -f "${PKG}" ] || {
        PKG="${SRC}/${SRC_NAME}/releases/${PKG_VER}/${PKG_PRE}.${SUF}"
        [ -f "${PKG}" ] || {
          echo "${PKG_PRE}.${SUF} not found."
          for pkgs in ${SRC}/${SRC_NAME}/releases/*/${PKG_NAME}_*.${SUF}
          do
            [ "${pkgs}" == "${SRC}/${SRC_NAME}/releases/*/${PKG_NAME}_*.${SUF}" ] || {
              echo "Found existing packages:"
              echo "${pkgs}"
            }
          done
          echo ""
          continue
        }
      }
    }

    if [ "${notlinux}" ]
    then
      MAN_INST="${SRC}/${SRC_NAME}/scripts/manual_install.sh"
      echo "Installing Gzip compressed tar archive"
      if [ -x "${MAN_INST}" ]
      then
        "${MAN_INST}" "${PKG}"
      else
        sudo tar -ompxzf "${PKG}" -C /
      fi
    else
      if [ "${debian}" ]
      then
        echo "Installing Debian format installation package"
        if [ "${have_apt}" ]
        then
          sudo apt install "${PKG}"
        else
          if [ "${have_dpkg}" ]
          then
            sudo dpkg -i "${PKG}"
          else
            echo "Cannot locate either apt or dpkg to install. Skipping."
          fi
        fi
      else
        echo "Installing RPM format installation package"
        if [ "${have_yum}" ]
        then
          sudo yum localinstall "${PKG}"
        else
          if [ "${have_rpm}" ]
          then
            sudo rpm -i "${PKG}"
          else
            echo "Cannot locate either yum or rpm to install. Skipping."
          fi
        fi
      fi
    fi
done
