#!/bin/bash
#
# Author: Ronald Joe Record <ronaldrecord@gmail.com>
#
# See https://developers.google.com/drive/api/v3/ref-search-terms#operators
# for more info on the Google Drive for Developers API (V3)
#
gdinst=`type -p gdrive`
[ "${gdinst}" ] || {
    echo "The 'gdrive' command is not installed or not in the execution PATH"
    echo "Visit https://github.com/doctorfree/DriveCommandLine/releases to download"
    echo "a 'DriveCommandLine' distribution archive or package for this platform"
    exit 1
}

GHOM=${HOME}/.gdrive

get_gdhome() {
  [ -f ${GHOM}/gdhome ] || {
    HERE="${HOME}/gdrive"
    while true
    do
        read -p "Initializing gdrive home to ${HERE}. Ok ? ('Y'/'N'): " yn
        case $yn in
            [Yy]*)
                [ -d ${GHOM} ] || mkdir -p ${GHOM}
                echo "GDHOME=${HERE}" > ${GHOM}/gdhome
                break
                ;;
            [Nn]*)
                read -p "Enter your gdrive home: " gdhome
                case ${gdhome} in
                    *)
                        echo "GDHOME=${gdhome}" > ${GHOM}/gdhome
                        ;;
                esac
                break
                ;;
            * )
                echo "Please answer yes or no."
                ;;
        esac
    done
  }

  . ${GHOM}/gdhome
  [ -d ${GDHOME} ] || mkdir -p ${GDHOME}
  cd ${GDHOME}
}

TELL=
splitpath=1

usage() {
  printf "\nUsage: sync2drive [-c configdir] [-k] [-l] [-m maxfiles] [-n] [-s] [-u] folder|path/to/folder"
  printf "\nWhere:"
  printf "\n\t-c 'configdir' specifies an alternative gdrive config folder (default: $HOME/.gdrive)"
  printf "\n\t-k indicates do not delete extraneous remote files"
  printf "\n\t-l indicates list sync folders and exit"
  printf "\n\t-p indicates list sync folders and display path and shared status"
  printf "\n\t-m 'maxfiles' specifies maximum number of file ids to return"
  printf "\n\t\t(default: 100)"
  printf "\n\t-n indicates tell me what you would do but don't do it"
  printf "\n\t-s indicates do not split path to identify name"
  printf "\n\t\t(useful when there is a slash in the folder name)"
  printf "\n\t-u displays this usage message\n"
  exit 1
}

maxfiles=100
delete="--delete-extraneous"
listing=
listpath=
export GDRIVE=gdrive
export GDGET=gdget
while getopts "c:klm:npsu" flag; do
    case $flag in
        c)
            GHOM="${OPTARG}"
            export GDRIVE="gdrive --config ${OPTARG}"
            export GDGET="gdget --config ${OPTARG}"
            ;;
        k)
            delete=
            ;;
        l)
            listing=1
            ;;
        p)
            listing=1
            listpath=1
            ;;
        m)
            maxfiles=${OPTARG}
            ;;
        n)
            TELL=1
            ;;
        s)
            splitpath=
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

get_gdhome

GDOPTS="--no-header --absolute --max ${maxfiles} --name-width 0"

[ "${listing}" ] && {
  if [ "${listpath}" ]
  then
    printf "\nId                                  Name\t\t\tCreated\t\tShared"
    while read syncfolder
    do
      thisID=`echo ${syncfolder} | awk ' { print $1 } '`
      [ "${thisID}" ] || continue
      path=`${GDRIVE} info ${thisID} | grep ^Path: | awk -F ':' ' { print $2 } '`
      path="$(echo -e "${path}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      date=`${GDRIVE} info ${thisID} | grep ^Created: | awk -F ':' ' { print $2 } '`
      date="$(echo -e "${date}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      shared=`${GDRIVE} info ${thisID} | grep ^Shared: | awk -F ':' ' { print $2 } '`
      shared="$(echo -e "${shared}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      pathsize=`echo ${path} | wc -c`
      if [ ${pathsize} -lt 8 ]
      then
        printf "\n${thisID}   ${path}\t\t\t\t${date}\t${shared}"
      else
        if [ ${pathsize} -lt 16 ]
        then
          printf "\n${thisID}   ${path}\t\t\t${date}\t${shared}"
        else
          if [ ${pathsize} -lt 20 ]
          then
            printf "\n${thisID}   ${path}\t\t${date}\t${shared}"
          else
            printf "\n${thisID}   ${path}\t${date}\t${shared}"
          fi
        fi
      fi
    done <<< `${GDRIVE} sync list --no-header`
    printf "\n"
  else
    ${GDRIVE} sync list
  fi
  exit 0
}

folder="$1"
[ "${folder}" ] || {
    echo "sync2drive requires a folder name as argument"
    usage
}
[ -d "${folder}" ] || {
    echo "sync2drive requires an existing local folder"
    echo "No folder ${folder} found. Exiting"
    usage
}

base="${folder}"
pdir=
parentid=
[ -f .folderid ] && parentid=`cat .folderid`
echo "${folder}" | grep '/' > /dev/null && {
    # Get the parent folder ID
    pdir=`dirname "${folder}"`
    [ -f "${pdir}"/.folderid ] || {
        echo "Cannot locate ${pdir}/.folderid"
        echo "Run 'getfolderids' to populate folders with folder ids"
        echo "Exiting without sync"
        exit 1
    }
    base=`basename "${folder}"`
    parentid=`cat "${pdir}"/.folderid`
}
[ "${parentid}" ] || {
    echo "Could not establish parent id."
    echo "Run 'getfolderids' to populate folders with folder ids"
    echo "Exiting without sync"
    exit 1
}

# Does this folder already exist?
exists=
while read match
do
    thisID=`echo ${match} | awk ' { print $1 } '`
    [ "${thisID}" ] || continue
    thisPath=`${GDRIVE} info ${thisID} | grep ^Path: | awk -F ':' ' { print $2 } '`
    # Remove leading and trailing spaces
    thisPath="$(echo -e "${thisPath}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
    [ "${thisPath}" == "${folder}" ] && {
      exists=${thisID}
      FID=${exists}
      children=`${GDRIVE} list --no-header --absolute --max 50 --name-width 0 --query " '${FID}' in parents" | wc -l`
      break
    }
done <<< `${GDRIVE} list ${GDOPTS} --query " name = '${base}' and parents in '${parentid}'"`

[ "${exists}" ] || {
    [ "${TELL}" ] && echo "Would create new folder ${folder} in Google Drive"
    # Create directory on drive
    if [ "${TELL}" ]
    then
      echo "${GDRIVE} mkdir --parent ${parentid} ${base} | awk ' { print FID } '"
    else
      FID=`${GDRIVE} mkdir --parent ${parentid} "${base}" | awk ' { print $2 } '`
    fi
}

# Sync to drive
if [ "${TELL}" ]
then
    if [ "${exists}" ]
    then
        echo "Would sync existing folder ${folder} in Google Drive"
    else
        echo "Would sync new folder ${folder} in Google Drive"
    fi
    if [ "${FID}" ]
    then
        ${GDRIVE} sync upload --dry-run ${delete} "${folder}" ${FID}
    else
        echo "${GDRIVE} sync upload ${delete} ${folder} FID"
    fi
else
    if [ "${exists}" ]
    then
      if [ ${children} -eq 0 ]
      then
        ${GDRIVE} sync upload ${delete} "${folder}" ${FID}
        echo "${FID}" > "${folder}"/.folderid
      else
        # Need to perform some gymnastics here to create a sync folder
        # for an existing non-empty Google Drive folder
        # Trick the system by:
        # 1. Download the existing non-empty Google Drive folder
        tmpdir="tmp$$"
        [ -d ${tmpdir} ] && rm -rf ${tmpdir}
        ${GDGET} -p ${tmpdir} "${folder}"
        # 2. Copy in extraneous files from the downloaded folder
        [ -d ${tmpdir}/"${folder}" ] || {
          echo "Download of ${folder} to ${tmpdir} failed"
          echo "Unable to create sync folder for ${folder}"
          exit 1
        }
        for content in ${tmpdir}/${base}/* ${tmpdir}/${base}/.?*
        do
          [ "${content}" == "${tmpdir}/${base}/*" ] && continue
          [ "${content}" == "${tmpdir}/${base}/.?*" ] && continue
          [ "${content}" == "${tmpdir}/${base}/.." ] && continue
          dlsub=`basename "${content}"`
          if [ -d "${content}" ]
          then
            [ -d "${folder}/${dlsub}" ] || cp -a "${content}" "${folder}/${dlsub}"
          else
            [ -f "${folder}/${dlsub}" ] || cp "${content}" "${folder}/${dlsub}"
          fi
        done
        rm -rf ${tmpdir}
        # 3. Remove the existing Google Drive folder
        ${GDRIVE} delete --recursive ${FID}
        # 4. Create a new Google Drive folder
        FID=`${GDRIVE} mkdir --parent ${parentid} "${base}" | awk ' { print $2 } '`
        # 5. Sync to the new folder
        ${GDRIVE} sync upload ${delete} "${folder}" ${FID}
      fi
    else
        ${GDRIVE} sync upload ${delete} "${folder}" ${FID}
    fi
    echo "${FID}" > "${folder}"/.folderid
fi
