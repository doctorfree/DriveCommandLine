#!/bin/bash
#
# Author: Ronald Joe Record <ronaldrecord@gmail.com>
#
# See https://developers.google.com/drive/api/v3/ref-search-terms#operators
# for more info on the Google Drive for Developers API (V3)
#
gdinst=`type -p gdrive`
[ "${gdinst}" ] || {
    echo "The 'gdrive' command is not installed or not in the execution PATH"
    echo "Visit https://github.com/doctorfree/DriveCommandLine/releases to download"
    echo "a 'DriveCommandLine' distribution archive or package for this platform"
    exit 1
}

GHOM=${HOME}/.gdrive
GDOPTS="--no-header --absolute --max 100 --name-width 0"

get_gdhome() {
  [ -f ${GHOM}/gdhome ] || {
    HERE="${HOME}/gdrive"
    while true
    do
        read -p "Initializing gdrive home to ${HERE}. Ok ? ('Y'/'N'): " yn
        case $yn in
            [Yy]*)
                [ -d ${GHOM} ] || {
                  if [ -w ${GHOM}/.. ]
                  then
                    mkdir -p ${GHOM}
                  else
                    sudo mkdir -p ${GHOM}
                    USER=$(stat -c '%U' ${HOME})
                    GROUP=$(stat -c '%G' ${HOME})
                    sudo chown ${USER}:${GROUP} ${GHOM}
                  fi
                }
                echo "GDHOME=${HERE}" > ${GHOM}/gdhome
                break
                ;;
            [Nn]*)
                read -p "Enter your gdrive home: " gdhome
                case ${gdhome} in
                    *)
                        echo "GDHOME=${gdhome}" > ${GHOM}/gdhome
                        ;;
                esac
                break
                ;;
            * )
                echo "Please answer yes or no."
                ;;
        esac
    done
  }

  . ${GHOM}/gdhome
  [ -d ${GDHOME} ] || {
    if [ -w ${GDHOME}/.. ]
    then
      mkdir -p ${GDHOME}
    else
      sudo mkdir -p ${GDHOME}
      USER=$(stat -c '%U' ${HOME})
      GROUP=$(stat -c '%G' ${HOME})
      sudo chown ${USER}:${GROUP} ${GDHOME}
    fi
  }
  cd ${GDHOME}
}

usage() {
  printf "\nUsage: gdget [-c configdir] [-d] [-f] [-n] [-r] [-s] [-p path] [-o] [-u] path/to/fileorfolder [file2 ...]"
  printf "\nWhere:\n\t-n indicates tell me what you would do but don't do it"
  printf "\n\t-c 'configdir' specifies an alternative gdrive config folder (default: $HOME/.gdrive)"
  printf "\n\t-d indicates delete remote file when download is successful"
  printf "\n\t-f indicates force overwrite of existing file"
  printf "\n\t-p 'path' specifies a download path"
  printf "\n\t-o indicates write file content to stdout"
  printf "\n\t-r indicates download directory and its contents recursively"
  printf "\n\t-s indicates skip existing files"
  printf "\n\t-u displays this usage message\n"
  exit 1
}

# Some useful options for gdrive download
#
# gdrive [global] download [options] <fileId>
#
# -f, --force           Overwrite existing file
# -s, --skip            Skip existing files
# -r, --recursive       Download directory recursively, documents will be skipped
# --path <path>         Download path
# --delete              Delete remote file when download is successful
# --stdout              Write file content to stdout

tell=
force=
skip=
recursive=
custompath=
delete=
stdout=

if [ "${GDRIVE_CONFIG_DIR}" ]
then
    export GDRIVE="gdrive --config '${GDRIVE_CONFIG_DIR}'"
else
    export GDRIVE=gdrive
fi
while getopts "c:dfp:norsu" flag; do
    case $flag in
        c)
            GHOM="${OPTARG}"
            export GDRIVE="gdrive --config ${OPTARG}"
            ;;
        d)
            delete="--delete"
            ;;
        f)
            force="--force"
            ;;
        n)
            tell=1
            ;;
        o)
            stdout="--stdout"
            ;;
        p)
            custompath="${OPTARG}"
            ;;
        r)
            recursive="--recursive"
            ;;
        s)
            skip="--skip"
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

SDIR=`pwd`
get_gdhome

# In the absence of a file or folder argument, get the current working dir
[ "$1" ] || set -- '.' "$@"
for file in "$@"
do
  topdir=
  if [ "${file}" == "." ]
  then
    if [ "${SDIR}" == "${GDHOME}" ]
    then
      topdir=1
      pdir="."
    else
      base=`basename "${SDIR}"`
      pdir=`dirname "${SDIR}"`
    fi
  else
    pdir=`dirname "${file}"`
    base=`basename "${file}"`
  fi
  [ -f "${pdir}"/.folderid ] || continue
  parentid=`cat "${pdir}"/.folderid`
  typ=

  if [ "${topdir}" ]
  then
    while read match
    do
      id=`echo ${match} | awk ' { print $1 } '`
      [ "${id}" ] || continue
      path=`${GDRIVE} info ${id} | grep ^Path: | awk -F ':' ' { print $2 } '`
      path="$(echo -e "${path}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      echo ${path} | grep '/' > /dev/null && continue
      typ=`${GDRIVE} info ${id} | grep ^Mime: | awk -F ':' ' { print $2 } '`
      typ="$(echo -e "${typ}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      echo ${typ} | grep folder > /dev/null && typ="dir"
      [ "${typ}" ] || {
        echo "No Google Drive file or folder '${file}' could be located"
        echo "Perhaps it is owned by another user or it does not exist"
        echo "Skipping download of '${path}'"
        continue
      }
      [ "${typ}" == "dir" ] && {
        [ "${recursive}" ] || continue
      }
      base=`${GDRIVE} info ${id} | grep ^Name: | awk -F ':' ' { print $2 } '`
      base="$(echo -e "${base}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      if [ "${custompath}" ]
      then
        dlpath="${custompath}"
      else
        dlpath="${pdir}"
      fi
      if [ "${tell}" ]
      then
        echo "Would execute the command:"
        echo "${GDRIVE} download query --path ${dlpath} ${recursive} ${force} ${skip} ${delete} ${stdout} \" name = '${base}' and parents in '${parentid}'\""
      else
        ${GDRIVE} download query --path "${dlpath}" \
           ${recursive} ${force} ${skip} ${delete} ${stdout} \
           " name = '${base}' and parents in '${parentid}'"
      fi
    done <<< `${GDRIVE} list ${GDOPTS} --query " parents in '${parentid}'"`
  else
    while read match
    do
      id=`echo ${match} | awk ' { print $1 } '`
      [ "${id}" ] || continue
      path=`${GDRIVE} info ${id} | grep ^Path: | awk -F ':' ' { print $2 } '`
      # Remove leading and trailing spaces
      path="$(echo -e "${path}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      [ "${path}" == "${file}" ] && {
        typ=`${GDRIVE} info ${id} | grep ^Mime: | awk -F ':' ' { print $2 } '`
        typ="$(echo -e "${typ}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
        echo ${typ} | grep folder > /dev/null && typ="dir"
        break
      }
    done <<< `${GDRIVE} list ${GDOPTS} --query " name = '${base}' and parents in '${parentid}'"`
    [ "${typ}" ] || {
      echo "No Google Drive file or folder '${file}' could be located"
      echo "Perhaps it is owned by another user or it does not exist"
      echo "Skipping download of '${file}'"
      continue
    }
    [ "${typ}" == "dir" ] && recursive="--recursive"
    if [ "${custompath}" ]
    then
      dlpath="${custompath}"
    else
      dlpath="${pdir}"
    fi
    if [ "${tell}" ]
    then
      echo "Would execute the command:"
      echo "${GDRIVE} download query --path ${dlpath} ${recursive} ${force} ${skip} ${delete} ${stdout} \" name = '${base}' and parents in '${parentid}'\""
    else
      ${GDRIVE} download query --path "${dlpath}" \
           ${recursive} ${force} ${skip} ${delete} ${stdout} \
           " name = '${base}' and parents in '${parentid}'"
    fi
  fi
done
