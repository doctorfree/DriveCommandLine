#!/bin/bash
#
# Author: Ronald Joe Record <ronaldrecord@gmail.com>
#
# See https://developers.google.com/drive/api/v3/ref-search-terms#operators
# for more info on the Google Drive for Developers API (V3)
#
gdinst=`type -p gdrive`
[ "${gdinst}" ] || {
    echo "The 'gdrive' command is not installed or not in the execution PATH"
    echo "Visit https://github.com/doctorfree/DriveCommandLine/releases to download"
    echo "a 'DriveCommandLine' distribution archive or package for this platform"
    exit 1
}

GHOM=${HOME}/.gdrive
GDOPTS="--no-header --absolute --max 100 --name-width 0"

get_gdhome() {
  [ -f ${GHOM}/gdhome ] || {
    HERE="${HOME}/gdrive"
    while true
    do
        read -p "Initializing gdrive home to ${HERE}. Ok ? ('Y'/'N'): " yn
        case $yn in
            [Yy]*)
                [ -d ${GHOM} ] || {
                  if [ -w ${GHOM}/.. ]
                  then
                    mkdir -p ${GHOM}
                  else
                    sudo mkdir -p ${GHOM}
                    USER=$(stat -c '%U' ${HOME})
                    GROUP=$(stat -c '%G' ${HOME})
                    sudo chown ${USER}:${GROUP} ${GHOM}
                  fi
                }
                echo "GDHOME=${HERE}" > ${GHOM}/gdhome
                break
                ;;
            [Nn]*)
                read -p "Enter your gdrive home: " gdhome
                case ${gdhome} in
                    *)
                        echo "GDHOME=${gdhome}" > ${GHOM}/gdhome
                        ;;
                esac
                break
                ;;
            * )
                echo "Please answer yes or no."
                ;;
        esac
    done
  }

  . ${GHOM}/gdhome
  [ -d ${GDHOME} ] || {
    if [ -w ${GDHOME}/.. ]
    then
      mkdir -p ${GDHOME}
    else
      sudo mkdir -p ${GDHOME}
      USER=$(stat -c '%U' ${HOME})
      GROUP=$(stat -c '%G' ${HOME})
      sudo chown ${USER}:${GROUP} ${GDHOME}
    fi
  }
  cd ${GDHOME}
}

TELL=
splitpath=1
recursive=

usage() {
  printf "\nUsage: gdrm [-c configdir] [-n] [-r] [-s] [-u] path/to/fileorfolder [file2 ...]"
  printf "\nWhere:\n\t-n indicates tell me what you would do but don't do it"
  printf "\n\t-c 'configdir' specifies an alternative gdrive config folder (default: $HOME/.gdrive)"
  printf "\n\t-r indicates remove directory and its contents recursively"
  printf "\n\t-s indicates do not split path to identify name"
  printf "\n\t\t(useful when there is a slash in the filename)"
  printf "\n\t-u displays this usage message\n"
  exit 1
}

if [ "${GDRIVE_CONFIG_DIR}" ]
then
    GHOM="${GDRIVE_CONFIG_DIR}"
    export GDRIVE="gdrive --config '${GDRIVE_CONFIG_DIR}'"
else
    export GDRIVE=gdrive
fi
while getopts "c:nrsu" flag; do
    case $flag in
        c)
            GHOM="${OPTARG}"
            export GDRIVE="gdrive --config ${OPTARG}"
            ;;
        n)
            TELL=1
            ;;
        r)
            recursive="--recursive"
            ;;
        s)
            splitpath=
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

[ "$1" ] || {
  echo "rmfile requires at least one argument specifying folder or file to remove"
  usage
}

get_gdhome

for file in "$@"
do
  base="${file}"
  dir=
  parentid=
  [ -f .folderid ] && parentid=`cat .folderid`
  [ "${splitpath}" ] && {
    echo "${file}" | grep '/' > /dev/null && {
      base=`basename "${file}"`
      dir=`dirname "${file}"`
      [ -f "${dir}"/.folderid ] && {
        parentid=`cat "${dir}"/.folderid`
      }
    }
  }
  [ "${parentid}" ] || {
    echo "Cannot locate parent id"
    echo "Run 'getfolderids' to populate folders with folder ids"
    echo "Exiting without sync"
    exit 1
  }

  while read match
  do
    id=`echo ${match} | awk ' { print $1 } '`
    [ "${id}" ] || continue
    path=`${GDRIVE} info ${id} | grep ^Path: | awk -F ':' ' { print $2 } '`
    # Remove leading and trailing spaces
    path="$(echo -e "${path}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
    [ "${path}" == "${file}" ] && {
      fid=${id}
      typ=`${GDRIVE} info ${id} | grep ^Mime: | awk -F ':' ' { print $2 } '`
      typ="$(echo -e "${typ}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      echo ${typ} | grep folder > /dev/null && typ="dir"
      [ "${typ}" == "dir" ] && {
        [ "${recursive}" ] || {
          echo "${file} is a directory but no -r flag was provided."
          echo "To remove a directory, use 'gdrm -r ...' to recursively delete"
          echo "the directory and its contents."
          echo "Skipping removal of ${file}."
          continue
        }
      }
      if [ "${TELL}" ]
      then
        echo "Would remove ${file} with id=${fid} with command:"
        echo "${GDRIVE} delete ${recursive} ${fid}"
      else
        ${GDRIVE} delete ${recursive} ${fid}
      fi
    }
  done <<< `${GDRIVE} list ${GDOPTS} --query " name = '${base}' and parents in '${parentid}'"`
done
