#!/bin/bash
#
# Author: Ronald Joe Record <ronaldrecord@gmail.com>
#
# See https://developers.google.com/drive/api/v3/ref-search-terms#operators
# for more info on the Google Drive for Developers API (V3)
#
# Some extra care needs to be taken figuring out the folder to sync because
# 'gdrive sync upload ...' creates sync folders whose name does not include
# the full path, just the base folder name, and there is no '--absolute'
# flag to 'gdrive sync list' nor is there a '--name' argument to 'sync upload'
#
# For these reasons, 'sync_from_drive' requires an existing local folder
# whose name matches that of the sync folder name and with a .folderid
# that matches the sync folder id. Run 'getfolderids' prior to 'sync_from_drive'.
#
gdinst=`type -p gdrive`
[ "${gdinst}" ] || {
    echo "The 'gdrive' command is not installed or not in the execution PATH"
    echo "Visit https://github.com/prasmussen/gdrive/releases to download"
    echo "a 'gdrive' binary for this platform"
    exit 1
}

GHOM=${HOME}/.gdrive

[ -f ${GHOM}/gdhome ] || {
    HERE=`pwd`
    while true
    do
        read -p "Initializing gdrive home to ${HERE}. Ok ? ('Y'/'N'): " yn
        case $yn in
            [Yy]*)
                [ -d ${GHOM} ] || mkdir -p ${GHOM}
                echo "GDHOME=${HERE}" > ${GHOM}/gdhome
                break
                ;;
            [Nn]*)
                read -p "Enter your gdrive home: " gdhome
                case ${gdhome} in
                    *)
                        echo "GDHOME=${gdhome}" > ${GHOM}/gdhome
                        ;;
                esac
                break
                ;;
            * )
                echo "Please answer yes or no."
                ;;
        esac
    done
}

. ${GHOM}/gdhome
[ -d ${GDHOME} ] || {
    echo "Cannot locate gdrive home ${GDHOME}"
    echo "Edit ${GHOM}/gdhome and set your local gdrive home"
    exit 1
}
cd ${GDHOME}

TELL=

usage() {
  printf "\nUsage: sync_from_drive [-l] [-n] [-u] folder | path/to/folder"
  printf "\nWhere:\n\t-n indicates tell me what you would do but don't do it"
  printf "\n\t-l indicates list sync folders and exit"
  printf "\n\t-u displays this usage message\n"
  exit 1
}

while getopts "lnu" flag; do
    case $flag in
        l)
            gdrive sync list
            exit 0
            ;;
        n)
            TELL=1
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

folder="$1"
[ "${folder}" ] || {
    echo "sync2drive requires a folder name as argument"
    usage
}
base="${folder}"
echo ${folder} | grep '/' > /dev/null && {
    base=`basename "${folder}"`
}
[ -d "${folder}" ] || {
    echo "Locating ${folder}"
    folder=
    foundnames=
    numfound=0
    while read dirname
    do
      if [ "${foundnames}" ]
      then
        foundnames="${foundnames} ${dirname}"
      else
        foundnames="${dirname}"
      fi
      ((numfound+=1))
    done <<< `find . -type d -name "${base}"`
    [ ${numfound} -eq 1 ] && folder=${foundnames}
    [ ${numfound} -gt 1 ] && {
      echo "Multiple folders named '${base}' exist in local directories."
      echo "Rerun 'sync_from_drive' specifying the full path to"
      echo "the folder you wish to sync."
      echo "Exiting without syncing."
      exit 1
    }
}

[ "${folder}" ] || {
    echo "Could not locate a folder named '${base}'."
    echo "Try specifying a full path to the folder you wish to sync."
    echo "Exiting without syncing."
    exit 1
}

[ -f "${folder}"/.folderid ] || {
    echo "No ${folder}/.folderid found"
    echo "Execute 'getfolderids' to populate folders with ids"
    echo "No sync performed. Exiting."
    exit 1
}

fid=`cat "${folder}"/.folderid`

# List syncable directories
exists=
while read match
do
    syncid=`echo ${match} | awk ' { print $1 } '`
    [ "${fid}" == "${syncid}" ] && {
      exists=${syncid}
      break
    }
done <<< `gdrive sync list --no-header`

[ "${exists}" ] || {
  echo "No sync folder for ${folder} exists."
  usage
}

# Sync from drive
if [ "${TELL}" ]
then
    echo "Would sync folder ${folder} from Google Drive"
    echo "gdrive sync download ${exists} ${folder}"
else
    gdrive sync download ${exists} "${folder}"
fi
