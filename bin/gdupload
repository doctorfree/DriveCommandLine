#!/bin/bash
#
# Author: Ronald Joe Record <ronaldrecord@gmail.com>
#
# See https://developers.google.com/drive/api/v3/ref-search-terms#operators
# for more info on the Google Drive for Developers API (V3)
#
gdinst=`type -p gdrive`
[ "${gdinst}" ] || {
    echo "The 'gdrive' command is not installed or not in the execution PATH"
    echo "Visit https://github.com/doctorfree/DriveCommandLine/releases to download"
    echo "a 'DriveCommandLine' distribution archive or package for this platform"
    exit 1
}

GHOM=${HOME}/.gdrive

get_gdhome() {
  [ -f ${GHOM}/gdhome ] || {
    HERE="${HOME}/gdrive"
    while true
    do
        read -p "Initializing gdrive home to ${HERE}. Ok ? ('Y'/'N'): " yn
        case $yn in
            [Yy]*)
                [ -d ${GHOM} ] || mkdir -p ${GHOM}
                echo "GDHOME=${HERE}" > ${GHOM}/gdhome
                break
                ;;
            [Nn]*)
                read -p "Enter your gdrive home: " gdhome
                case ${gdhome} in
                    *)
                        echo "GDHOME=${gdhome}" > ${GHOM}/gdhome
                        ;;
                esac
                break
                ;;
            * )
                echo "Please answer yes or no."
                ;;
        esac
    done
  }

  . ${GHOM}/gdhome
  [ -d ${GDHOME} ] || mkdir -p ${GDHOME}
  cd ${GDHOME}
}

usage() {
  printf "\nUsage: gdupload [-c configdir] [-u] path/to/fileorfolder [file2 ...]"
  printf "\nWhere:"
  printf "\n\t-c 'configdir' specifies an alternative gdrive config folder (default: $HOME/.gdrive)"
  printf "\n\t-u displays this usage message\n"
  exit 1
}

if [ "${GDRIVE_CONFIG_DIR}" ]
then
    export GDRIVE="gdrive --config '${GDRIVE_CONFIG_DIR}'"
    export SYNC2DRIVE="sync2drive -c '${GDRIVE_CONFIG_DIR}'"
    export GETFOLDERIDS="getfolderids -c '${GDRIVE_CONFIG_DIR}'"
else
    export GDRIVE=gdrive
    export SYNC2DRIVE=sync2drive
    export GETFOLDERIDS=getfolderids
fi
while getopts "c:u" flag; do
    case $flag in
        c)
            GHOM="${OPTARG}"
            export GDRIVE="gdrive --config ${OPTARG}"
            export SYNC2DRIVE="sync2drive -c ${OPTARG}"
            export GETFOLDERIDS="getfolderids -c ${OPTARG}"
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

[ "$1" ] || usage

get_gdhome

for file in "$@"
do
    recursive=

    # Does the file or folder exist locally
    if [ -d "${file}" ]
    then
        recursive="--recursive"
    else
        [ -f "${file}" ] || {
            echo "$file does not exist in local directory. Skipping."
            continue
        }
    fi

    # Check to see if this is a sync folder
    exists=
    pdir=`dirname "${file}"`
    base=`basename "${file}"`
    [ -f "${pdir}"/.folderid ] || {
        echo "Missing ${pdir}/.folderid"
        echo "Run 'getfolderids' to populate folders with ids"
        echo "Skipping upload of ${file}"
        continue
    }
    parentid=`cat "${pdir}"/.folderid`
    while read match
    do
        syncid=`echo ${match} | awk ' { print $1 } '`
        [ "${syncid}" == "${parentid}" ] && {
          exists=${syncid}
          break
        }
    done <<< `${GDRIVE} sync list --no-header`

    [ "${exists}" ] && {
      echo "${pdir} is a sync folder."
      echo "Currently files and directories cannot be uploaded to sync folders."
      echo "Place the desired uploads in the local ${pdir} folder"
      echo "and run '${SYNC2DRIVE} ${pdir}'"
      continue
    }

    typ=
    skip=
    sync=
    delete=
    fid=
    # Check to see if this file or folder already exists. Then what?
    while read match
    do
      id=`echo ${match} | awk ' { print $1 } '`
      [ "${id}" ] || continue
      path=`${GDRIVE} info ${id} | grep ^Path: | awk -F ':' ' { print $2 } '`
      # Remove leading and trailing spaces
      path="$(echo -e "${path}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      [ "${path}" == "${file}" ] && {
        fid=${id}
        typ=`${GDRIVE} info ${id} | grep ^Mime: | awk -F ':' ' { print $2 } '`
        typ="$(echo -e "${typ}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
        echo ${typ} | grep folder > /dev/null && typ="dir"
        break
      }
    done <<< `${GDRIVE} list ${GDOPTS} --query " name = '${base}' and parents in '${parentid}'"`

    [ "${typ}" == "dir" ] && {
      echo "A Google Drive folder '${file}' already exists."
      echo "Uploading '${file}' would create a new folder"
      echo "with the same name and a different Google Drive ID."
      echo ""
      while true
      do
        PS3="${BOLD}Please enter your desire (numeric): ${NORMAL}"
        options=("Preserve Existing Folder and Create Sync Folder" "Delete Existing Folder and Upload New" "Create New Duplicate Folder Name" "Skip Upload")
        select opt in "${options[@]}"
        do
          case "$opt,$REPLY" in
            "Preserve Existing Folder and Create Sync Folder",*|*,"Preserve Existing Folder and Create Sync Folder")
              printf "\nCreating Sync folder '${file}'\n"
              sync=1
              break 2
              ;;
            "Delete Existing Folder and Upload New",*|*,"Delete Existing Folder and Upload New")
              printf "\nDeleting existing folder and uploading '${file}'\n"
              delete=1
              break 2
              ;;
            "Create New Duplicate Folder Name",*|*,"Create New Duplicate Folder Name")
              printf "\nCreating duplicate folder name '${file}'\n"
              break 2
              ;;
            "Skip Upload",*|*,"Skip Upload")
              printf "\nSkipping '${file}'\n"
              skip=1
              break 2
              ;;
            *,*)
              printf "\nInvalid selection. Please enter the number of your choice.\n"
              break
              ;;
          esac
        done
      done
    }

    [ "${skip}" ] && continue
    [ "${sync}" ] && {
      ${SYNC2DRIVE} "${file}"
      continue
    }
    [ "${delete}" ] && {
      [ "${fid}" ] && {
        ${GDRIVE} delete ${recursive} ${fid}
      }
    }

    ${GDRIVE} upload ${recursive} --parent ${parentid} "${file}"
    [ "${typ}" == "dir" ] && {
      # Get the folder IDs of this folder and its subfolders
      ${GETFOLDERIDS} "${file}"
    }
done
