#!/bin/bash
#
# Author: Ronald Joe Record <ronaldrecord@gmail.com>
#
# See https://developers.google.com/drive/api/v3/ref-search-terms#operators
# for more info on the Google Drive for Developers API (V3)
#
# In order to support spaces in file and folder names, use 'gdrive info ID'
# to retrieve the Name and Path rather than trying to awk the list.
#
# The format returned by 'gdrive info ID' is:
#
# Id: 0B3IaKKQ-Wu1RYXB0eUhMVFNUWjQ
# Name: iOS Contacts
# Path: IFTTT/iOS Contacts
# Mime: application/vnd.google-apps.folder
# Created: 2013-12-17 19:22:56
# Modified: 2013-12-17 19:23:01
# Shared: False
# Parents: 0B3IaKKQ-Wu1RT3p0WGUtWVJQYkE
#
gdinst=`type -p gdrive`
[ "${gdinst}" ] || {
    echo "The 'gdrive' command is not installed or not in the execution PATH"
    echo "Visit https://github.com/prasmussen/gdrive/releases to download"
    echo "a 'gdrive' binary for this platform"
    exit 1
}

GHOM=${HOME}/.gdrive

[ -f ${GHOM}/gdhome ] || {
    HERE=`pwd`
    while true
    do
        read -p "Initializing gdrive home to ${HERE}. Ok ? ('Y'/'N'): " yn
        case $yn in
            [Yy]*)
                [ -d ${GHOM} ] || mkdir -p ${GHOM}
                echo "GDHOME=${HERE}" > ${GHOM}/gdhome
                break
                ;;
            [Nn]*)
                read -p "Enter your gdrive home: " gdhome
                case ${gdhome} in
                    *)
                        echo "GDHOME=${gdhome}" > ${GHOM}/gdhome
                        ;;
                esac
                break
                ;;
            * )
                echo "Please answer yes or no."
                ;;
        esac
    done
}

. ${GHOM}/gdhome
[ -d ${GDHOME} ] || {
    echo "Cannot locate gdrive home ${GDHOME}"
    echo "Edit ${GHOM}/gdhome and set your local gdrive home"
    exit 1
}
cd ${GDHOME}
ID_DIR="${GDHOME}/drive_ids"
BU_DIR="${GDHOME}/Bak/drive_ids"

TELL=
ONLY=1
maxfiles=500

usage() {
  printf "\nUsage: getfolderids [-f] [-m maxfiles] [-n] [-u] [path/to/folder]"
  printf "\nWhere:"
  printf "\n\t-f indicates 'files', also create a list of file IDs (slower)\n"
  printf "\n\t-m 'maxfiles' specifies the maximum number of files in query return"
  printf "\n\t\t(default: 500)"
  printf "\n\t-n indicates tell me what you would do but don't do it"
  printf "\n\t-u displays this usage message\n"
  printf "\nIn the absence of a 'path/to/folder' getfolderids will retrieve"
  printf "\nand populate all local folders with folder IDs.\n"
  printf "\nIf a 'path/to/folder' argument is provided then getfolderids will retrieve"
  printf "\nand populate 'path/to/folder' and its subfolders with folder IDs.\n"
  printf "\nExample:\n\tgetfolderids MagicMirror"
  printf "\nWould retrieve and populate folder IDs in the 'MagicMirror' folder"
  printf "\nand all subfolders within, ignoring files located in that hierarchy.\n"
  exit 1
}

while getopts "fm:nu" flag; do
    case $flag in
        f)
            ONLY=
            ;;
        m)
            maxfiles=${OPTARG}
            ;;
        n)
            TELL=1
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

GDOPTS="--no-header --absolute --max ${maxfiles} --name-width 0"

FOLDER=
[ "$1" ] && {
  FOLDER="$1"
  echo "Setting folder IDs for folder ${FOLDER} and its subfolders"
}

if [ -f .folderid ]
then
  GDID=`cat .folderid`
else
  # Get top folder ID by creating a directory, getting its parent id, then remove it
  tmpfolder="__tmpfolder__$$"
  TMPFID=`gdrive mkdir ${tmpfolder} | awk ' { print $2 } '`
  GDID=`gdrive info ${TMPFID} | grep Parents: | awk ' { print $2 } '`
  echo "Retrieved top level folder ID = ${GDID}"
  gdrive delete --recursive ${TMPFID} > /dev/null
  [ "${GDID}" ] && echo "${GDID}" > .folderid
fi
[ "${GDID}" ] || {
  echo "Could not retrieve top-level drive ID"
  echo "Using previously created setting for top-level ID"
  # Replace this ID with the ID of the top level of your Google Drive
  # that you wish to use with the gdrive command line utility
  GDID='0AHIaKKQ-Wu1RUk9PVA'
}
TOPID=${GDID}

[ -d ${ID_DIR} ] || mkdir -p ${ID_DIR}
[ -d ${BU_DIR} ] || mkdir -p ${BU_DIR}

if [ "${FOLDER}" ]
then
  prefix=`echo ${FOLDER} | sed -e "s,/,_,g"`
  FIDLIST="${ID_DIR}/${prefix}_file_ids.txt"
  DIRLIST="${ID_DIR}/${prefix}_folder_ids.txt"
  FIDBULIST="${BU_DIR}/${prefix}_file_ids.txt"
  DIRBULIST="${BU_DIR}/${prefix}_folder_ids.txt"
  # Get the parent ID of the specified folder
  base=`basename ${FOLDER}`
  pdir=`dirname ${FOLDER}`
  parentid=
  [ -f .folderid ] && parentid=`cat .folderid`
  [ -f ${pdir}/.folderid ] && {
    parentid=`cat ${pdir}/.folderid`
  }
  [ "${parentid}" ] || {
    echo "Cannot locate parent id"
    echo "Run 'getfolderids' to populate folders with folder ids"
    echo "Exiting"
    usage
  }
  exists=
  while read match
  do
    thisID=`echo ${match} | awk ' { print $1 } '`
    [ "${thisID}" ] || continue
    thisPath=`gdrive info ${thisID} | grep ^Path: | awk -F ':' ' { print $2 } '`
    # Remove leading and trailing spaces
    thisPath="$(echo -e "${thisPath}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
    [ "${thisPath}" == "${FOLDER}" ] && {
      exists=${thisID}
      TOPID=${exists}
      echo "Set top folder ID to ${TOPID}"
      if [ "${TELL}" ]
      then
        echo "Would add folder id '${FOLDER}/.folderid'"
      else
        [ -d "${FOLDER}" ] || mkdir -p "${FOLDER}"
        [ "${TOPID}" ] && echo "${TOPID}" > "${FOLDER}"/.folderid
      fi
      break
    }
  done <<< `gdrive list ${GDOPTS} --query " name = '${base}' and parents in '${parentid}'"`

  [ "${exists}" ] || {
    echo "Cannot locate specified folder: ${FOLDER}"
    echo "in Google Drive. Exiting without populating folder IDs"
    usage
  }
else
  FIDLIST="${ID_DIR}/file_ids.txt"
  DIRLIST="${ID_DIR}/folder_ids.txt"
  FIDBULIST="${BU_DIR}/file_ids.txt"
  DIRBULIST="${BU_DIR}/folder_ids.txt"
fi
if [ "${TELL}" ]
then
  echo "Would backup any existing file id lists"
else
  [ -f ${FIDLIST} ] && mv ${FIDLIST} ${FIDBULIST}$$
  touch ${FIDLIST}
  [ -f ${DIRLIST} ] && mv ${DIRLIST} ${DIRBULIST}$$
  touch ${DIRLIST}
fi

echo "Creating local folder IDs stored in 'path/to/folder/.folderid'"
echo "Depending on the number of files and folders currently stored in Google Drive,"
echo "this process can be time consuming. Please be patient."

getids() {
  while read entry
  do
    thisID=`echo ${entry} | awk ' { print $1 } '`
    [ "${thisID}" ] || continue
    thisPath=`gdrive info ${thisID} | grep ^Path: | awk -F ':' ' { print $2 } '`
    # Remove leading and trailing spaces
    thisPath="$(echo -e "${thisPath}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
    thisType=`gdrive info ${thisID} | grep ^Mime: | awk -F ':' ' { print $2 } '`
    thisType="$(echo -e "${thisType}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
    echo ${thisType} | grep folder > /dev/null && thisType="dir"
    if [ "${thisType}" == "dir" ]
    then
      if [ "${subdirIDs}" ]
      then
        subdirIDs="${thisID} ${subdirIDs}"
      else
        subdirIDs="${thisID}"
      fi
      if [ "${TELL}" ]
      then
        echo "Would add folder id for ${thisPath} to folder id list"
      else
        echo "${thisPath} = ${thisID}" >> ${DIRLIST}
        [ -d "${thisPath}" ] || mkdir -p "${thisPath}"
        echo "Adding folder ID for '${thisPath}'"
        echo "${thisID}" > "${thisPath}"/.folderid
      fi
    else
      [ "${ONLY}" ] || {
        if [ "${TELL}" ]
        then
          echo "Would add file id for ${thisPath} to file id list"
        else
          echo "${thisPath} = ${thisID}" >> ${FIDLIST}
        fi
      }
    fi
  done <<< `gdrive list ${GDOPTS} --query " '$1' in parents"`
}

subdirIDs=
# Start at top or specified folder
[ "${TELL}" ] && echo "Calling getids ${TOPID}"
getids ${TOPID}
[ "${subdirIDs}" ] && {
  for folderID in ${subdirIDs}
  do
    subdirIDs=
    [ "${TELL}" ] && echo "Calling getids ${folderID}"
    getids ${folderID}
    [ "${subdirIDs}" ] && {
      for subFolderID in ${subdirIDs}
      do
        subdirIDs=
        [ "${TELL}" ] && echo "Calling getids ${subFolderID}"
        getids ${subFolderID}
        [ "${subdirIDs}" ] && {
          for subSubFolderID in ${subdirIDs}
          do
            subdirIDs=
            [ "${TELL}" ] && echo "Calling getids ${subSubFolderID}"
            getids ${subSubFolderID}
            [ "${subdirIDs}" ] && {
              for finalFolderID in ${subdirIDs}
              do
                subdirIDs=
                [ "${TELL}" ] && echo "Calling getids ${finalFolderID}"
                getids ${finalFolderID}
              done
            }
          done
        }
      done
    }
  done
}

if [ "${TELL}" ]
then
  echo "Would remove duplicate file and folder id lists"
else
  [ -f ${FIDBULIST}$$ ] && {
    diff ${FIDLIST} ${FIDBULIST}$$ > /dev/null && rm -f ${FIDBULIST}$$
  }
  [ -f ${DIRBULIST}$$ ] && {
    diff ${DIRLIST} ${DIRBULIST}$$ > /dev/null && rm -f ${DIRBULIST}$$
  }
fi
