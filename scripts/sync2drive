#!/bin/bash
#
# Author: Ronald Joe Record <ronaldrecord@gmail.com>
#
# See https://developers.google.com/drive/api/v3/ref-search-terms#operators
# for more info on the Google Drive for Developers API (V3)
#
gdinst=`type -p gdrive`
[ "${gdinst}" ] || {
    echo "The 'gdrive' command is not installed or not in the execution PATH"
    echo "Visit https://github.com/prasmussen/gdrive/releases to download"
    echo "a 'gdrive' binary for this platform"
    exit 1
}

GHOM=${HOME}/.gdrive

[ -f ${GHOM}/gdhome ] || {
    HERE=`pwd`
    while true
    do
        read -p "Initializing gdrive home to ${HERE}. Ok ? ('Y'/'N'): " yn
        case $yn in
            [Yy]*)
                [ -d ${GHOM} ] || mkdir -p ${GHOM}
                echo "GDHOME=${HERE}" > ${GHOM}/gdhome
                break
                ;;
            [Nn]*)
                read -p "Enter your gdrive home: " gdhome
                case ${gdhome} in
                    *)
                        echo "GDHOME=${gdhome}" > ${GHOM}/gdhome
                        ;;
                esac
                break
                ;;
            * )
                echo "Please answer yes or no."
                ;;
        esac
    done
}

. ${GHOM}/gdhome
[ -d ${GDHOME} ] || {
    echo "Cannot locate gdrive home ${GDHOME}"
    echo "Edit ${GHOM}/gdhome and set your local gdrive home"
    exit 1
}
cd ${GDHOME}

TELL=
splitpath=1

usage() {
  printf "\nUsage: sync2drive [-k] [-l] [-m maxfiles] [-n] [-s] [-u] folder|path/to/folder"
  printf "\nWhere:"
  printf "\n\t-k indicates do not delete extraneous remote files"
  printf "\n\t-l indicates list sync folders and exit"
  printf "\n\t-m 'maxfiles' specifies maximum number of file ids to return"
  printf "\n\t\t(default: 100)"
  printf "\n\t-n indicates tell me what you would do but don't do it"
  printf "\n\t-s indicates do not split path to identify name"
  printf "\n\t\t(useful when there is a slash in the folder name)"
  printf "\n\t-u displays this usage message\n"
  exit 1
}

maxfiles=100
delete="--delete-extraneous"
while getopts "klm:nsu" flag; do
    case $flag in
        k)
            delete=
            ;;
        l)
            gdrive sync list
            exit 0
            ;;
        m)
            maxfiles=${OPTARG}
            ;;
        n)
            TELL=1
            ;;
        s)
            splitpath=
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

GDOPTS="--no-header --absolute --max ${maxfiles} --name-width 0"

folder="$1"
[ "${folder}" ] || {
    echo "sync2drive requires a folder name as argument"
    usage
}
[ -d "${folder}" ] || {
    echo "sync2drive requires an existing local folder"
    echo "No folder ${folder} found. Exiting"
    usage
}

base=${folder}
pdir=
parentid=
[ -f .folderid ] && parentid=`cat .folderid`
echo "${folder}" | grep '/' > /dev/null && {
    # Get the parent folder ID
    pdir=`dirname ${folder}`
    [ -f ${pdir}/.folderid ] || {
        echo "Cannot locate ${pdir}/.folderid"
        echo "Run 'getfolderids' to populate folders with folder ids"
        echo "Exiting without sync"
        exit 1
    }
    base=`basename ${folder}`
    parentid=`cat ${pdir}/.folderid`
}
[ "${parentid}" ] || {
    echo "Could not establish parent id."
    echo "Run 'getfolderids' to populate folders with folder ids"
    echo "Exiting without sync"
    exit 1
}

# Does this folder already exist?
exists=
while read match
do
    thisID=`echo ${match} | awk ' { print $1 } '`
    [ "${thisID}" ] || continue
    thisPath=`gdrive info ${thisID} | grep ^Path: | awk -F ':' ' { print $2 } '`
    # Remove leading and trailing spaces
    thisPath="$(echo -e "${thisPath}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
    [ "${thisPath}" == "${folder}" ] && {
      exists=${thisID}
      FID=${exists}
      break
    }
done <<< `gdrive list ${GDOPTS} --query " name = '${base}' and parents in '${parentid}'"`

[ "${exists}" ] || {
  [ "${TELL}" ] && echo "Would create new folder ${folder} in Google Drive"
  # Create directory on drive
  if [ "${TELL}" ]
  then
    echo "gdrive mkdir --parent ${parentid} ${base} | awk ' { print FID } '"
  else
    FID=`gdrive mkdir --parent ${parentid} ${base} | awk ' { print $2 } '`
  fi
}

# Sync to drive
if [ "${TELL}" ]
then
    if [ "${exists}" ]
    then
        echo "Would sync existing folder ${folder} in Google Drive"
    else
        echo "Would sync new folder ${folder} in Google Drive"
    fi
    if [ "${FID}" ]
    then
        gdrive sync upload --dry-run ${delete} ${folder} ${FID}
    else
        echo "gdrive sync upload ${delete} ${folder} FID"
    fi
else
    gdrive sync upload ${delete} ${folder} ${FID}
fi
