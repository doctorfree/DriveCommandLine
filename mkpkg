#!/bin/bash
PKG="DriveCommandLine"
SRC_NAME="DriveCommandLine"
PKG_NAME="DriveCommandLine"
TOP="usr"
DESTDIR="${TOP}/local"
LBIN="${DESTDIR}/bin"
SRC=${HOME}/src
SUDO=sudo
GCI=

dpkg=`type -p dpkg-deb`
[ "${dpkg}" ] || {
    echo "Debian packaging tools do not appear to be installed on this system"
    echo "Are you on the appropriate Linux system with packaging requirements ?"
    echo "Exiting"
    exit 1
}

[ -f "${SRC}/${SRC_NAME}/VERSION" ] || {
  [ -f "/builds/doctorfree/${SRC_NAME}/VERSION" ] || {
    echo "$SRC/$SRC_NAME/VERSION does not exist. Exiting."
    exit 1
  }
  SRC="/builds/doctorfree"
  SUDO=
  GCI=1
}

. "${SRC}/${SRC_NAME}/VERSION"
PKG_VER=${VERSION}
PKG_REL=${RELEASE}

# Subdirectory in which to create the distribution files
OUT_DIR="dist/${PKG_NAME}_${PKG_VER}"

[ -d "${SRC}/${SRC_NAME}" ] || {
    echo "$SRC/$SRC_NAME does not exist or is not a directory. Exiting."
    exit 1
}

cd "${SRC}/${SRC_NAME}"
${SUDO} rm -rf dist
mkdir dist

[ -d ${OUT_DIR} ] && rm -rf ${OUT_DIR}
mkdir ${OUT_DIR}
mkdir ${OUT_DIR}/DEBIAN
chmod 755 ${OUT_DIR} ${OUT_DIR}/DEBIAN

for dir in "${TOP}" "${DESTDIR}" "${LBIN}" "${TOP}/share" \
            "${TOP}/share/doc" "${TOP}/share/doc/${PKG}"
do
    [ -d ${OUT_DIR}/${dir} ] || ${SUDO} mkdir ${OUT_DIR}/${dir}
done

# Copy in the DriveCommandLine scripts
${SUDO} cp bin/* ${OUT_DIR}/${LBIN}

# Build all the gdrive binaries
[ -d releases ] || mkdir releases
[ -x scripts/build-all.sh ] || chmod 755 scripts/build-all.sh
scripts/build-all.sh "${SRC}/${SRC_NAME}"

${SUDO} cp AUTHORS ${OUT_DIR}/${TOP}/share/doc/${PKG}/AUTHORS
${SUDO} cp LICENSE ${OUT_DIR}/${TOP}/share/doc/${PKG}/copyright
${SUDO} cp CHANGELOG.md ${OUT_DIR}/${TOP}/share/doc/${PKG}/changelog
${SUDO} cp README.md ${OUT_DIR}/${TOP}/share/doc/${PKG}/README
${SUDO} gzip -9 ${OUT_DIR}/${TOP}/share/doc/${PKG}/changelog
${SUDO} cp -a markdown "${OUT_DIR}/${TOP}/share/doc/${PKG}/markdown"
${SUDO} cp -a man "${OUT_DIR}/${TOP}/share/doc/${PKG}/man"
${SUDO} cp -a man "${OUT_DIR}/${TOP}/share/man"

${SUDO} chmod 755 ${OUT_DIR}/${LBIN}/*

# Set ownership of distribution hierarchy to root:root
${SUDO} chown -R root:root ${OUT_DIR}

for platforms in releases/bin/*
do
  platform=`basename ${platforms}`
  OPSM=`echo ${platform} | awk -F '_' ' { print $1 } '`
  ARCH=`echo ${platform} | awk -F '_' ' { print $2 } '`
  echo "Creating ${platform} distribution"

  # Remove any os/architecture specific gdrive binary from the dist tree
  ${SUDO} rm -f ${OUT_DIR}/${LBIN}/gdrive*
  # Copy the os/architecture specific gdrive binary into place
  ${SUDO} cp ${platforms}/gdrive* ${OUT_DIR}/${LBIN}
  ${SUDO} chown root:root ${OUT_DIR}/${LBIN}/gdrive*

  [ "${OPSM}" == "linux" ] && {
    echo "Building Debian and RPM packages for ${platform}"
    # If Linux then build Debian and RPM packages
    ${SUDO} echo "Package: ${PKG}
Version: ${PKG_VER}-${PKG_REL}
Section: misc
Priority: optional
Architecture: ${ARCH}
Depends:
Suggests:
Maintainer: ${DEBFULLNAME} <${DEBEMAIL}>
Build-Depends: debhelper (>= 11)
Standards-Version: 4.1.3
Homepage: https://gitlab.com/doctorfree/DriveCommandLine
Description: Google Drive Command Line Tools
 Manage your Google Drive from the command line" > ${OUT_DIR}/DEBIAN/control
    ${SUDO} chmod 644 ${OUT_DIR}/DEBIAN/control

    cd dist
    echo "Building ${PKG_NAME}_${PKG_VER}-${PKG_REL}.${platform} package"
    ${SUDO} dpkg --build ${PKG_NAME}_${PKG_VER} ${PKG_NAME}_${PKG_VER}-${PKG_REL}.${platform}.deb

    [ "${GCI}" ] || {
      [ -d ../releases ] || mkdir ../releases
      [ -d ../releases/${PKG_VER} ] || mkdir ../releases/${PKG_VER}
      ${SUDO} cp *.deb *.gz *.zip ../releases/${PKG_VER}
    }

    # Experimental RPM distribution build
    cd "${SRC}/${SRC_NAME}"
    [ -d rpm ] && ${SUDO} cp -a rpm ${OUT_DIR}/rpm
    [ -d ${OUT_DIR}/rpm ] || ${SUDO} mkdir ${OUT_DIR}/rpm

    have_rpm=`type -p rpmbuild`
    [ "${have_rpm}" ] || {
      ${SUDO} apt-get update
      ${SUDO} apt-get install rpm -y
    }

    [ -d ${OUT_DIR}/BUILDROOT ] || ${SUDO} mkdir -p ${OUT_DIR}/BUILDROOT
    [ -d ${OUT_DIR}/BUILDROOT/usr ] && ${SUDO} rm -rf ${OUT_DIR}/BUILDROOT/usr
    ${SUDO} cp -a ${OUT_DIR}/usr ${OUT_DIR}/BUILDROOT/usr

    ${SUDO} rpmbuild -ba --build-in-place --target "${ARCH}-unknown-${OPSM}" \
       --define "_topdir ${OUT_DIR}" \
       --define "_version ${PKG_VER}" \
       --define "_release ${PKG_REL}" \
       --define "_sourcedir ${OUT_DIR}" \
       --define "_rpmfilename %%{ARCH}/%%{NAME}-%%{VERSION}-%%{RELEASE}.${OPSM}_%%{ARCH}.rpm" \
       --buildroot ${SRC}/${SRC_NAME}/${OUT_DIR}/BUILDROOT \
       ${OUT_DIR}/rpm/${PKG_NAME}.spec

    ${SUDO} cp dist/${PKG_NAME}_${PKG_VER}/RPMS/*/*.rpm dist

    [ "${GCI}" ] || {
      [ -d releases ] || mkdir releases
      [ -d releases/${PKG_VER} ] || mkdir releases/${PKG_VER}
      ${SUDO} cp ${OUT_DIR}/RPMS/*/*.rpm releases/${PKG_VER}
    }
  }

  cd "${SRC}/${SRC_NAME}/dist/${PKG_NAME}_${PKG_VER}"
  echo "Creating compressed tar archive of ${PKG_NAME} ${PKG_VER}-${PKG_REL}.${platform} distribution"
  ${SUDO} tar cf - usr | gzip -9 > ../${PKG_NAME}_${PKG_VER}-${PKG_REL}.${platform}-dist.tar.gz
  [ "${GCI}" ] || {
    echo "Creating zip archive of ${PKG_NAME} ${PKG_VER}-${PKG_REL}.${platform} distribution"
    ${SUDO} zip -q -r ../${PKG_NAME}_${PKG_VER}-${PKG_REL}.${platform}-dist.zip usr
  }
  cd "${SRC}/${SRC_NAME}"
done
