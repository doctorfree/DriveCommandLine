#!/bin/bash
PKG="DriveCommandLine"
SRC_NAME="DriveCommandLine"
PKG_NAME="DriveCommandLine"
TOP="usr"
DESTDIR="${TOP}/local"
LBIN="${DESTDIR}/bin"
SRC=${HOME}/src
SUDO=sudo
GCI=

dpkg=`type -p dpkg-deb`
[ "${dpkg}" ] || {
    echo "Debian packaging tools do not appear to be installed on this system"
    echo "Are you on the appropriate Linux system with packaging requirements ?"
    echo "Exiting"
    exit 1
}

[ -f "${SRC}/${SRC_NAME}/VERSION" ] || {
  [ -f "/builds/doctorfree/${SRC_NAME}/VERSION" ] || {
    echo "$SRC/$SRC_NAME/VERSION does not exist. Exiting."
    exit 1
  }
  SRC="/builds/doctorfree"
  SUDO=
  GCI=1
}

. "${SRC}/${SRC_NAME}/VERSION"
PKG_VER=${VERSION}
PKG_REL=${RELEASE}

# Subdirectory in which to create the distribution files
OUT_DIR="dist/${PKG_NAME}_${PKG_VER}"

[ -d "${SRC}/${SRC_NAME}" ] || {
    echo "$SRC/$SRC_NAME does not exist or is not a directory. Exiting."
    exit 1
}

cd "${SRC}/${SRC_NAME}"
${SUDO} rm -rf dist
mkdir dist

[ -d ${OUT_DIR} ] && rm -rf ${OUT_DIR}
mkdir ${OUT_DIR}
mkdir ${OUT_DIR}/DEBIAN
chmod 755 ${OUT_DIR} ${OUT_DIR}/DEBIAN

echo "Package: ${PKG}
Version: ${PKG_VER}-${PKG_REL}
Section: misc
Priority: optional
Architecture: amd64
Depends:
Suggests:
Maintainer: ${DEBFULLNAME} <${DEBEMAIL}>
Build-Depends: debhelper (>= 11)
Standards-Version: 4.1.3
Homepage: https://gitlab.com/doctorfree/DriveCommandLine
Description: Google Drive Command Line Tools
 Manage your Google Drive from the command line" > ${OUT_DIR}/DEBIAN/control
chmod 644 ${OUT_DIR}/DEBIAN/control

for dir in "${TOP}" "${DESTDIR}" "${LBIN}" "${TOP}/share" \
            "${TOP}/share/doc" "${TOP}/share/doc/${PKG}"
do
    [ -d ${OUT_DIR}/${dir} ] || ${SUDO} mkdir ${OUT_DIR}/${dir}
    ${SUDO} chown root:root ${OUT_DIR}/${dir}
done

${SUDO} cp scripts/* ${OUT_DIR}/${LBIN}

# Install gdrive binary
# go get gitlab.com/doctorfree/DriveCommandLine
[ -d ${HOME}/go ] || mkdir -p ${HOME}/go
[ -d ${HOME}/go/bin ] || mkdir -p ${HOME}/go/bin
go install github.com/prasmussen/gdrive@latest
if [ "${GOPATH}" ]
then
    [ -f ${GOPATH}/bin/gdrive ] && ${SUDO} cp ${GOPATH}/bin/gdrive ${OUT_DIR}/${LBIN}
else
    [ -f ${HOME}/go/bin/gdrive ] && ${SUDO} cp ${HOME}/go/bin/gdrive ${OUT_DIR}/${LBIN}
fi

${SUDO} cp AUTHORS ${OUT_DIR}/${TOP}/share/doc/${PKG}/AUTHORS
${SUDO} cp LICENSE ${OUT_DIR}/${TOP}/share/doc/${PKG}/copyright
${SUDO} cp CHANGELOG.md ${OUT_DIR}/${TOP}/share/doc/${PKG}/changelog
${SUDO} cp README.md ${OUT_DIR}/${TOP}/share/doc/${PKG}/README
${SUDO} gzip -9 ${OUT_DIR}/${TOP}/share/doc/${PKG}/changelog
# ${SUDO} cp -a markdown "${OUT_DIR}/${TOP}/share/doc/${PKG}/markdown"
# ${SUDO} cp -a man "${OUT_DIR}/${TOP}/share/doc/${PKG}/man"
# ${SUDO} cp -a man "${OUT_DIR}/${TOP}/share/man"

${SUDO} chmod 755 ${OUT_DIR}/${LBIN}/*

cd dist
echo "Building ${PKG_NAME}_${PKG_VER}-${PKG_REL} package"
${SUDO} dpkg --build ${PKG_NAME}_${PKG_VER} ${PKG_NAME}_${PKG_VER}-${PKG_REL}.deb
cd ${PKG_NAME}_${PKG_VER}
echo "Creating compressed tar archive of ${PKG_NAME} ${PKG_VER}-${PKG_REL} distribution"
tar cf - usr | gzip -9 > ../${PKG_NAME}_${PKG_VER}-${PKG_REL}-dist.tar.gz
[ "${GCI}" ] || {
    echo "Creating zip archive of ${PKG_NAME} ${PKG_VER}-${PKG_REL} distribution"
    zip -q -r ../${PKG_NAME}_${PKG_VER}-${PKG_REL}-dist.zip usr
}
cd ..

[ "${GCI}" ] || {
    [ -d ../releases ] || mkdir ../releases
    [ -d ../releases/${PKG_VER} ] || mkdir ../releases/${PKG_VER}
    ${SUDO} cp *.deb *.gz *.zip ../releases/${PKG_VER}
}

# Experimental RPM distribution build
cd "${SRC}/${SRC_NAME}"
[ -d rpm ] && cp -a rpm ${OUT_DIR}/rpm
[ -d ${OUT_DIR}/rpm ] || mkdir ${OUT_DIR}/rpm

have_rpm=`type -p rpmbuild`
[ "${have_rpm}" ] || {
  ${SUDO} apt-get update
  ${SUDO} apt-get install rpm -y
}

[ -d ${OUT_DIR}/BUILDROOT ] || ${SUDO} mkdir -p ${OUT_DIR}/BUILDROOT
[ -d ${OUT_DIR}/BUILDROOT/usr ] && ${SUDO} rm -rf ${OUT_DIR}/BUILDROOT/usr
${SUDO} cp -a ${OUT_DIR}/usr ${OUT_DIR}/BUILDROOT/usr

${SUDO} rpmbuild -ba --build-in-place \
   --define "_topdir ${OUT_DIR}" \
   --define "_version ${PKG_VER}" \
   --define "_release ${PKG_REL}" \
   --buildroot ${SRC}/${SRC_NAME}/${OUT_DIR}/BUILDROOT \
   ${OUT_DIR}/rpm/${PKG_NAME}.spec

${SUDO} cp dist/${PKG_NAME}_${PKG_VER}/RPMS/*/*.rpm dist

[ "${GCI}" ] || {
    [ -d releases ] || mkdir releases
    [ -d releases/${PKG_VER} ] || mkdir releases/${PKG_VER}
    ${SUDO} cp ${OUT_DIR}/RPMS/*/*.rpm releases/${PKG_VER}
}
